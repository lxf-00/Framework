1. 程序的耦合
    *      耦合：程序键的依赖关系
    *          包括
    *              类之间的依赖
    *              方法之间的依赖
   *       解耦：
    *          降低程序间的依赖关系
   *       实际开发中：编译期不依赖，运行时依赖
    *      解耦思路：
    *          第一种：使用反射来创建对象，避免使用new关键字；
    *          第二种：通过读取配置文件来获取要创建的对象全限定类名。
    */

2. spring 环境搭建：
    2.1 pom.xml 导入jar坐标
    2.2 配置文件的编写： bean.xml
    2.3 spring对bean的管理细节
        2.3.1 创建bean的三种方式：
            2.3.1.1 创建的方式一： 默认方式， bean标签，配以id和class属性，没有其他属性和标签，采用默认构造函数创建对象，如果对象中没有默认构造函数，对象无法创建。
            2.3.1.2 创建方式二： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器中）
            2.3.1.3 创建方式三： 使用工厂中的静态方法创建对象（某个类中静态方法创建对象，并存入spring容器)
        2.3.2 bean对象的作用范围： bean标签scope属性，用于指定bean的作用范围；
            2.3.2.1 singleton   单例 默认值
            2.3.2.2 prototype    多例
            2.3.2.3 request       作用于web的请求范围
            2.3.2.4 session      作用于web应用的会话范围
            2.3.2.5 global-session    作用于集群环境的会话范围（全局会话范围），当不是集群环境时，他就是session
        2.3.3 bean对象的生命周期：
            2.3.3.1 单例对象：
                出生：当容器创建时，对象出生
                活着：只要容器存在
                死亡：容器销毁
                总结：单例对象的生命周期和容器相同
            2.3.3.2 多例对象：
                出生：使用对象时
                活着：对象在使用过程中
                死亡： 当对象长时间不用且没有别的对象引用时，由java的垃圾回收器h回收

3. spring的依赖注入
    3.1 IOC的作用:降低程序间的的耦合（依赖关系）；
    3.2 依赖关系的管理：以后都交给spring来管理。当前类需要用到其他类的对象，由spring来提供，我们只需要在配置文件中说明。
    3.3 依赖关系的维护称之为：依赖注入
        3.3.1 依赖注入：
                能注入的数据：有三类
                    基本类型和String
                    其他bean类型（在配置文件中或者注解配置过的bean )
                    复杂类型/集合类型：
                              给List结构集合注入的标签有：
                                  list array set
                              用于给map结构注入的标签有：
                                  map props
                              结构相同，标签可以互换。
                注入的方式：
                    第一种：使用构造函数提供；
                                使用标签： constructor-arg
                                使用的位置： bean标签内部
                                标签中的属性：
                                    type: 用于指定要注入数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                                    index：用于指定要注入数据给构造函数中指定索引位置的参数赋值，参数的索引的位置从0开始
                                    name： 用于指定给构造函数中指定名称的参数赋值（常用）

                                    value： 用于提供基本类型和String类型数据
                                    ref:用于指定其他的bean类型数据，spring Ioc核心容器中出现过的对象
                                优势： 获取bean对象时，注入数据时必须操作，否则对象无法创建成功
                                弊端： 改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
                    第二种：使用set方式提供：更常用
                                使用的标签：property
                                出现的位置：bean标签的内部
                                标签的属性：
                                    name： 用于指定注入时所调用的set方法名称
                                    value： 用于提供基本类型和String类型数据
                                    ref:用于指定其他的bean类型数据，spring Ioc核心容器中出现过的对象
                                好处： 创建对象时没有明确的限制，可以直接使用默认构造函数
                                弊端： 如果某个成员必须有值，则set方法无法保证一定注入。
                     第三种： 使用注解提供

4. spring基于注解的IoC
    4.1 spring中IoC的常用注解
    4.2 案例： 使用xml方式实现单表的的CURD操作(持久层计数选择：dbutils
    4.3 改造基于注解的IoC案例，使用纯注解的方式实现
    4.4 spring和junit的整合

