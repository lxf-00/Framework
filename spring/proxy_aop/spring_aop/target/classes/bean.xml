<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置spring的Ioc，把service对象导入进来-->
    <bean id="accountService" class="com.springlearning.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的AOP配置步骤：
        1. 把通知Bean也交给spring来管理
        2. 使用aop:config 标签表明开始AOP的配置
        3. 使用aop:aspect标签表明配置切面
            id:给切面提供一个唯一标志
            ref:指定通知类Bean的id
        4. aop:aspect内部使用对应的标签来配置通知的类型
            现示例让Logger在切入点方法执行前先执行，为前置通知。
            apo:before 标签： method属于指定Logger中那个方法是前置通知， pointcut属性，用于指定切入点表达式，该表达式的含义是对业务中那些方法进行增强

            切入点表达式的写法：
                关键字; execution(表达式)
                表达式： 访问修饰符 返回值  包名.包名.包名.....类名.方法名(参数列表）
                访问修饰符可以省略   返回值可以使用通配符，表示任意返回值
                全通配写法：
                    * *..*.*(..)
                实际开发中通用写法：
                    切到业务层实现类下的所有方法：
    -->
    <!--配置通知类: Logger-->
    <bean id="logger" class="com.springlearning.utils.Logger"></bean>
    <!--配置AOP-->
    <aop:config>
        <!--配置切入点表达式： id属性用于指定表达式的唯一标志, expression用于指定表达式内容的
               此表达式写在aop:aspect内部，只能当前表内部切面方法使用；
               还可以写在aop:aspect外面，此时所有切面方法可用。

           -->
        <aop:pointcut id="pt1" expression="execution(* com.springlearning.service.impl.*.*(..))"></aop:pointcut>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger" >
            <!--配置通知的类型且建立通知方法和切入点方法的关联-->
            <!--<aop:before method="beforePrint" pointcut-ref="pt1"></aop:before>-->
            <!--<aop:after-returning method="afterReturnPrint" pointcut-ref="pt1"></aop:after-returning>-->
            <!--<aop:after-throwing method="throwPrint" pointcut-ref="pt1"></aop:after-throwing>-->
            <!--<aop:before method="afterPrint" pointcut-ref="pt1"></aop:before>-->

            <!--配置环绕通知-->
            <aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>