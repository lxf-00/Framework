MyBatis框架：

1，框架概述
    1.1 框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。
    1.2 框架要解决的问题： 框架要解决的最重要的一个问题是技术整合的问题
    1.3 软件开发的分层重要性：框架的重要性在于它实现了部分功能，并且能够很好的将低层应用平台和高层业务逻辑进行了缓和。为了实现
                            软件工程中的“高内聚、低耦合”。把问题划分开来各个解决，易于控制，易于延展，易于分配资源。我们常见的
                            MVC 软件设计思想就是很好的分层思想。
    1.4 分层开发下的常见框架（常见的 JavaEE 开发框架):
        1,4.1 解决数据的持久化问题的框架: MyBatis
        1.4.2 解决 WEB 层问题的 MVC 框架: spring MVC
        1.4.3 解决技术整合问题的框架: spring 框架

2， MyBatis 框架：
    2.1 MyBatis 框架概述： mybatis 是一个优秀的基于 java 的持久层框架，它内部封装了 jdbc，使开发者只需要关注 sql 语句本身，而不需要花费精力去处理加载驱动、创建连接、创建 statement 等繁杂的过程。
                          mybatis 通过 xml 或注解的方式将要执行的各种 statement 配置起来，并通过 java 对象和 statement 中
                          sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并
                          返回。
                          采用 ORM 思想解决了实体和数据库映射的问题，对 jdbc 进行了封装，屏蔽了 jdbc api 底层访问细节，使我
                          们不用与 jdbc api 打交道，就可以完成对数据库的持久化操作
    2.2  Mybatis 框架快速入门：
        2.2.1 环境搭建
            2.2.1.1 创建空的maven工程
            2.2.1.2 导入mysql,mybatis，junit... jar坐标
            2.2.1.3 创建实体类和dao接口
            2.2.1.4 创建mybatis的主配置文件（SqlMapConfig.xml)
            2.2.1.5 创建映射配置文件（UserDao.xml)
        2.2.2 入门案例：使用概括
            2.2.2.1 读取配置文件
                很少使用绝对路径和相对路径；
                第一种：使用类加载器，读取类路径的配置路径；
                第二种：使用ServletContext对象的getRealPath()
            2.2.2.2 创建SqlSessionFactory工厂
                创建工厂，mybatis使用了构建者模式：把创建细节隐藏，使用之直接调用方法即可拿到对象。
            2.2.2.3 使用工厂创建SqlSession对象
                生产SqlSession使用了工厂模式：解耦（降低类之间的依赖关系）
            2.2.2.4 使用SqlSession创建Dao接口的代理对象
                创建Dao实现类使用了代理模式：不修改源码的基础上，对已有方法进行增强。
            2.2.2.5 使用代理对象执行方法
            2.2.2.6 释放资源
    2.3 MyBatis 注解开发和编写
	移除UserDao.xml,在dao接口方法上使@SELECT注解，并且指定sql语句。同时需要在SqlMapConfig.xml文件中mapper配置中，使用class属性指定dao接口的全限定类名。

    2.4 自定义mybatis
	    2.4.1 mybatis在使用代理dao方式实现增删改查：只做了两件事
	        第一：创建代理对象
	        第二：在代理对象中调用selectList
        2.4.2 自定义mybatis涉及到的类
            class Resuorce
            class SqlSessionFactoryBuild
            interface SqlSessionFactory
            interface SqlSession
	2.4.3 大致流程 
		2.4.3.1 SqlSessionFactoryBuilder接收SqlMapConfig.xml文件流，构建出SqlSessionFactory对象；
		2.4.3.2 SqlSessionFactory读取SqlMapConfigu.xml中连接数据库和mapper映射信息。用来生产真正操作数据库的SqlSession对象。
		2.4.3.3 SqlSession对象有两大作用：生成接口代理对象，定义增删改查方法。 
		2.4.3.4 封装结果集 
       
    3 mybatis: curd方法
        3.1 查询操作 select
        3.2 保存操作 insert  (占位符#{})
        3.3  更新操作  update (#{})
        3.4  删除操作  delete (#{})
        3.5  根据id查询用户、根据名称模糊查询用户(两种方式 #{} 占位符 ${}拼接sql串）
        3.6  聚合函数查询
        3.7  select last_insert_id(); 新增id的返回值
        3.8 parameterType(输入类型）：ognl表达式（Object Graphic Navigation Language); 通过对象的取值方法来获取数据，在写法上把get给省略了。
        3.9 多个条件组成对象进行查询。
        3.10 sql成员变量与sql不一致解决思路： 起别名；配置查询结果的列名和实体类的属性名对应关系： <resultMap id=”“ type><id property="" column=""/></resultType>


