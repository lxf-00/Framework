<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.dao.UserDao">
    <!-- 了解的内容：抽取重复的sql语句-->
    <resultMap id="userMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="password" column="password"></result>
        <!-- collection 是用于建立一对多中集合属性的对应关系
        ofType 用于指定集合元素的数据类型
        -->
        <collection property="account" ofType="account">
            <id column="aid" property="id"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
    </resultMap>
    <sql id="defaultUser">
        select * from user
    </sql>
    <!--查询所有用户-->
    <select id="findAll" resultType="com.mybatis.domain.User">
        select * from user;
    </select>
    <!--保存用户-->
    <insert id="saveUser" parameterType="com.mybatis.domain.User">
      <!--配置插入数据，获取插入数据的id-->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});
    </insert>
    <!--更新用户-->
    <update id="updateUser" parameterType="com.mybatis.domain.User">
        update user set username=#{username}, address=#{address}, sex=#{sex},birthday=#{birthday} where id=#{id};
    </update>
    <!--删除用户-->
    <delete id="delUser" parameterType="Integer">
        delete from user where id=#{id};
    </delete>
    <!--根据用户id查询用户-->
    <select id="findById" parameterType="Integer" resultType="com.mybatis.domain.User">
        select * from user where id=#{id};
    </select>
    <!--模糊查询 -->
    <select id="findByName" parameterType="String" resultType="com.mybatis.domain.User">
        select * from user where username like #{name};
    </select>
    <!--查询用户总数-->
    <select id="findTotal" resultType="int">
        select count(*) from user;
    </select>
    <!--根据自定义条件对象查询用户-->
    <select id="findByVo" parameterType="com.mybatis.domain.QueryVo" resultType="com.mybatis.domain.User">
        select * from user where username like #{user.username};
    </select>
    <select id="findByUser" parameterType="user" resultType="com.mybatis.domain.User">
        <!--select * from user where 1 = 1
        <if test="username != null">
            and username = #{username}
        </if>
        <if test="sex != null">
            and sex = #{sex}
        </if>-->
        <!--where标签简化操作-->
        <include refid="defaultUser"/>
        <where>
            <if test="username != null">
                and username like #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>
    <!--根据数组id进行查询-->
    <select id="findByIds" parameterType="QueryVo" resultType="com.mybatis.domain.User">
        <include refid="defaultUser"/>
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>
    <!--查询所有用户并获取用户账户信息-->
    <select id="findTotalWithAccount" resultMap="userMap">
        select u.*, a.id as aid, a.uid, a.money from user as u  left join account as a on u.id=a.uid;
    </select>
</mapper>